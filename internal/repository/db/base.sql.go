// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: base.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (id, wallet_id, amount, operation_type)
VALUES ($1, $2, $3, $4)
`

type CreateTransactionParams struct {
	ID            string
	WalletID      string
	Amount        int32
	OperationType string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction,
		arg.ID,
		arg.WalletID,
		arg.Amount,
		arg.OperationType,
	)
	return err
}

const createWallet = `-- name: CreateWallet :exec
INSERT INTO wallets (id, amount)
VALUES ($1, 0)
`

func (q *Queries) CreateWallet(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, createWallet, id)
	return err
}

const deposit = `-- name: Deposit :one
UPDATE wallets
SET amount = amount + $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING amount
`

type DepositParams struct {
	ID     string
	Amount int32
}

func (q *Queries) Deposit(ctx context.Context, arg DepositParams) (int32, error) {
	row := q.db.QueryRow(ctx, deposit, arg.ID, arg.Amount)
	var amount int32
	err := row.Scan(&amount)
	return amount, err
}

const getBalance = `-- name: GetBalance :one
SELECT amount 
FROM wallets
WHERE id = $1
`

func (q *Queries) GetBalance(ctx context.Context, id string) (int32, error) {
	row := q.db.QueryRow(ctx, getBalance, id)
	var amount int32
	err := row.Scan(&amount)
	return amount, err
}

const withdraw = `-- name: Withdraw :one
UPDATE wallets
SET amount = amount - $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING amount
`

type WithdrawParams struct {
	ID     string
	Amount int32
}

func (q *Queries) Withdraw(ctx context.Context, arg WithdrawParams) (int32, error) {
	row := q.db.QueryRow(ctx, withdraw, arg.ID, arg.Amount)
	var amount int32
	err := row.Scan(&amount)
	return amount, err
}
